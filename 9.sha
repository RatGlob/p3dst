//Cg

/*
We now try to implement what was written in the introduction in 8.py. To
summarize: We like to calculate our lighting equation for each vertex. For this
we need the position of the light and the normal of the vertex.

TODO model space, world space

TODO explain dot product, and why normalization is needed
*/

/*
TODO
*/
void vshader(
    uniform float4x4 mat_modelproj,
    uniform float4 mspos_light,
    in float4 vtx_position : POSITION,
    in float3 vtx_normal : NORMAL,
    in float4 vtx_color : COLOR,
    out float4 l_color : COLOR,
    out float4 l_position : POSITION)
{
    l_position = mul(mat_modelproj, vtx_position);

    float3 lightposition = mspos_light.xyz;
    float3 modelposition = vtx_position.xyz;
    float3 normal = normalize(vtx_normal);
    float3 direction = normalize(lightposition - modelposition);
    float brightness = saturate(dot(normal, direction));

    l_color = vtx_color * brightness;
}

/*
If something has to be explained here then something went wrong.
*/
void fshader(
    in float4 l_color : COLOR,
    out float4 o_color : COLOR)
{
    o_color = l_color;
}
